// Define o pacote ao qual esta classe utilit√°ria pertence.
package br.edu.ifba.saj.comum.util;

// Importa classes do Java para manipula√ß√£o de data e hora.
import java.time.LocalDateTime;
import java.time.format.DateTimeFormatter;

/**
 * Fornece uma classe utilit√°ria est√°tica para registrar mensagens formatadas e coloridas no console.
 * √â projetado para ser simples e limpo, facilitando a depura√ß√£o do sistema distribu√≠do.
 */
public class SimpleLogger {

    // Define uma enumera√ß√£o (enum) para os diferentes n√≠veis de log.
    public enum Level {
        // Cada n√≠vel de log possui um emoji e um c√≥digo de cor ANSI para formata√ß√£o no console.
        INFO("‚ÑπÔ∏è", "\033[34m"),     // Azul para informa√ß√µes gerais.
        SUCCESS("‚úÖ", "\033[32m"),  // Verde para opera√ß√µes bem-sucedidas.
        WARNING("‚ö†Ô∏è", "\033[33m"),  // Amarelo para avisos ou poss√≠veis problemas.
        ERROR("‚ùå", "\033[31m"),    // Vermelho para erros e falhas.
        DEBUG("üîß", "\033[90m");   // Cinza para mensagens de depura√ß√£o detalhadas.

        // Atributos finais para armazenar o emoji e a cor de cada n√≠vel.
        private final String emoji;
        private final String color;

        // Construtor do enum, que associa um emoji e uma cor a cada constante.
        Level(String emoji, String color) {
            this.emoji = emoji;
            this.color = color;
        }
    }

    // Constante est√°tica para o c√≥digo ANSI que reseta a cor do texto no console para o padr√£o.
    private static final String RESET = "\033[0m";
    // Constante est√°tica para formatar o timestamp das mensagens de log no formato Hora:Minuto:Segundo.
    private static final DateTimeFormatter TIME_FORMAT = DateTimeFormatter.ofPattern("HH:mm:ss");
    // Flag est√°tica para controlar se as mensagens de n√≠vel DEBUG devem ser exibidas.
    private static boolean debugEnabled = false;

    /**
     * Ativa a exibi√ß√£o de mensagens de log do n√≠vel DEBUG.
     */
    public static void enableDebug() {
        debugEnabled = true;
    }

    /**
     * Desativa a exibi√ß√£o de mensagens de log do n√≠vel DEBUG.
     */
    public static void disableDebug() {
        debugEnabled = false;
    }

    /**
     * Registra uma mensagem de log com o n√≠vel INFO.
     * @param component O nome do componente que est√° registrando a mensagem (ex: "Cliente", "Worker").
     * @param message A mensagem a ser registrada.
     */
    public static void info(String component, String message) {
        log(Level.INFO, component, message);
    }

    /**
     * Registra uma mensagem de log com o n√≠vel SUCCESS.
     */
    public static void success(String component, String message) {
        log(Level.SUCCESS, component, message);
    }

    /**
     * Registra uma mensagem de log com o n√≠vel WARNING.
     */
    public static void warning(String component, String message) {
        log(Level.WARNING, component, message);
    }

    /**
     * Registra uma mensagem de log com o n√≠vel ERROR.
     */
    public static void error(String component, String message) {
        log(Level.ERROR, component, message);
    }

    /**
     * Sobrecarga do m√©todo error para incluir informa√ß√µes de uma exce√ß√£o (Throwable).
     * @param throwable A exce√ß√£o que causou o erro.
     */
    public static void error(String component, String message, Throwable throwable) {
        log(Level.ERROR, component, message + " | Erro: " + throwable.getMessage());
    }

    /**
     * Registra uma mensagem de log com o n√≠vel DEBUG, mas apenas se o modo debug estiver ativado.
     */
    public static void debug(String component, String message) {
        if (debugEnabled) {
            log(Level.DEBUG, component, message);
        }
    }

    /**
     * M√©todo privado central que formata e imprime a mensagem de log no console.
     * @param level O n√≠vel da mensagem (INFO, ERROR, etc.).
     * @param component O componente de origem.
     * @param message A mensagem a ser impressa.
     */
    private static void log(Level level, String component, String message) {
        // Obt√©m o timestamp atual formatado.
        String timestamp = LocalDateTime.now().format(TIME_FORMAT);
        // Monta a string final com cores ANSI, timestamp, emoji, componente e a mensagem.
        String formattedMessage = String.format("%s[%s] %s %s: %s%s",
                level.color,
                timestamp,
                level.emoji,
                component,
                message,
                RESET // Reseta a cor no final.
        );
        // Imprime a mensagem formatada na sa√≠da padr√£o do sistema.
        System.out.println(formattedMessage);
    }

    // Se√ß√£o com m√©todos de conveni√™ncia para registrar logs de componentes espec√≠ficos (Worker, Cliente, Orquestrador)
    // sem a necessidade de passar o nome do componente a cada chamada.

    public static void workerInfo(String workerId, String message) {
        info("Worker-" + workerId, message);
    }

    public static void workerSuccess(String workerId, String message) {
        success("Worker-" + workerId, message);
    }

    public static void workerError(String workerId, String message) {
        error("Worker-" + workerId, message);
    }

    public static void workerWarning(String workerId, String message) {
        warning("Worker-" + workerId, message);
    }

    public static void clienteInfo(String message) {
        info("Cliente", message);
    }

    public static void clienteSuccess(String message) {
        success("Cliente", message);
    }

    public static void clienteError(String message) {
        error("Cliente", message);
    }

    public static void clienteWarning(String message) {
        warning("Cliente", message);
    }

    public static void orquestradorInfo(String message) {
        info("Orquestrador", message);
    }

    public static void orquestradorSuccess(String message) {
        success("Orquestrador", message);
    }

    public static void orquestradorError(String message) {
        error("Orquestrador", message);
    }

    public static void orquestradorWarning(String message) {
        warning("Orquestrador", message);
    }
}